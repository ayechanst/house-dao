House DAO
TODO: make getReputation work.
options:
- have an array of arrays to store memebers reputation where the repArray index is
  equal the index position of the member
- have one array of all rep points each person has and just do math on it before
  returning that array to the front end
- make the members into structs and give them reputation there


* Phase 1 walkthrough
** Global variables
- membersMapping
  just returns true or false if member is there
- membersArray
  array of strings of group members
- taskArray
  has all the tasks
- runnerUp
  - variable is increased each time a task is voted to be active
  - it is used in ballot() to represent the task being voted on
** Functions
*** votingTask()
- returns a task at the index of the runnerUp
- if there are no tasks it will return a blank one
We have 4 scenarios:
- [X] No tasks yet at all
  - we can return a blank task that tells the UI to load a different component
- [X] The previous task wins
  - move onto the next task in the que
- [ ] The previous task wins and there are no new ones
- [ ] The previous task loses
- [ ] The previous task loses and there are no new ones
  - return a blank task
*** ballot()
- ticks up yes or no as votes flow in
if a task wins:
1. the runner up is set to active
2. yes and no are reset to 0
3. runner up ticks up to prepare ballot for the next task to vote on
else:
1. the runner up remains inactive
*** gradeTask()
- gets the target task
- gets the grade
Then:
1. gets the correct task
2. grabs the manager
3. adds the grade to the *global totalGrade*
4. increase the *global numOfGrades*
5. checks if the numOfGrades is equal to the taskForce length
   if it does it updates everything
*** cycleManager()
1. gets the task out of the array
2. gets the current task manager
3. gets the taskForce
4. gets the index of the manager
5. ticks up index of the manager
6.



* Phase 2 ideas
- ppl can see votes in favor
- if a vote ties flips a coin
- add a timer tied to a block number
- display task status
- have task descriptions
* question for se2
gm everyone, im having trouble understanding the wagmi hook useScaffoldContractRead. in the docs it says that u can give it an argument? but my lsp says that the expression is not
callable on line 23. this component returns buttons of members in a dao, and when u click
a members button its supposed to display their reputation. in my smart contract the
getReputation function takes in a string (the member's name) and finds their name in a
reputation array that looks like:
mapping(string => uint256[]) public reputation;
the uint256[] is an array of grades they receive from 1-10, and the function gets that array
and averages out their grades for their average reputation. some more info:
1. getReputation() in sol works fine in debug contracts for finding an individual's reputation.
2. my component might look weird im not too sure about .tsx conventions but it seems however
   i refactor it when i call reputationOf() -> (the useScaffoldContractRead) it always says
   the expression is not callable.
3. the contract itself is compiling just fine.
4. i commented out the Reputation.tsx component in my main file because it was breaking my
   whole app in the front end.
5. this is a v1 of the project, i just want it to work now and im optimising it in v2.

does anyone have an idea of whats going on? if something isnt clear lmk!
